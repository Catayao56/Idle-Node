# config.dat and real_config.dat contents:
# 
# first_run              ::  `True` or `False`  ::  True is the program is not yet started. Otherwise, it is set to False.
# ip_list                ::  a string           ::  The path of the contact list file.
# username               ::  a string           ::  The user's username.
# userid                 ::  a string           ::  A random string generated on startup.
# userpass               ::  an SHA-1 hash      ::  The user's hashed password.
# prompt_main            ::  a string           ::  The string that will show in the main menu prompt.
# prompt_p2p_chat        ::  a string           ::  The string that will show when chatting with peers.
# prompt_gc_chat         ::  a string           ::  The string that will show when chatting on a conference room.
# prompt_settings_panel  ::  a string           ::  The string that will show when on the settings panel.
# prompt_benchmark       ::  a string           ::  The string that will show when benchmarking.
# ddns                   ::  `True` or `False`  ::  True if user uses a DDNS service. Otherwise, it is set to False.
# ddns_provider          ::  a string           ::  The DDNS provider's name.
# ddns_domain            ::  a string           ::  The user's DDNS domain given by the DDNS provider.
# ddns_token             ::  a string           ::  The user's DDNS token/API key/password given by the DDNS provider.
# ping_port              ::  an integer 1~65535 ::  The port that the program will use for recieving ping requests.
# sending_port           ::  an integer 1~65535 ::  The port that the program will use for sending messages
# recieve_port           ::  an integer 1~65535 ::  The port that the program will use for recieving messages
# dedicated_server_ports ::  an integer range   ::  Range of ports that program will use if running as dedicated server.
# trans_plaintext        ::  `True` or `False`  ::  If True, it can be used for transporting messages. This is not recommended
# trans_base64           ::  `True` or `False`  ::  If True, this cipher can be used for transporting messages.
# trans_aes              ::  `True` or `False`  ::  If True, this cipher can be used for transporting messages.
# trans_rsa              ::  `True` or `False`  ::  If True, this cipher can be used for transporting messages.
# trans_aes_rsa_hybrid   ::  `True` or `False`  ::  If True, this cipher can be used for transporting messages.
# trans_third_party      ::  `True` of `False`  ::  If True, third-party ciphers can be used.
# save_conversation_logs ::  `True` or `False`  ::  If True, program will save conversation logs on data/conv_logs.dat
# max_threads            ::  an integer         ::  Number of threads to use
# requests_timeout       ::  an integer         ::  The timeout (in seconds) for requests module.
#

# True = The program is not yet used. False = The program is previously used.
first_run=True

# The file that contains the IP list.
ip_list=data/contact_list.lst

# User details
username=Anonymous
userid=
userpass=changemepls

# The prompt that will show up when you use the program.
prompt_main=[$USERNAME@$USERIP]: 
prompt_p2p_chat=[$USERNAME@$USERIP][$RECVNAME@$RECVIP]: 
prompt_gc_chat=[$USERNAME@$USERIP][$GCNAME@$GCIP]: 
prompt_settings_panel=[$USERNAME@$USERIP][SETTINGS PANEL]: 
prompt_benchmark=[$USERNAME@$USERIP][BENCHMARK]: 

# DDNS Settings
ddns=True
ddns_provider=None
ddns_domain=None
ddns_token=None

# Ports to use
# Ping/Latency port
ping_port=30001
# Sending Port
sending_port=30050
# Recieving Port
recieve_port=30051
# Dedicated Server Ports
dedicated_server_ports=30101-30150

# Ciphers to be used on transportation
trans_plaintext=False
trans_base64=False
trans_aes=True
trans_rsa=True
trans_aes_rsa_hybrid=True
trans_third_party=True

# Save conversation logs?
save_conversation_logs=False

# Maximum_threads (0=default)
max_threads=0

# Timeout for requests module
requests_timeout=15
